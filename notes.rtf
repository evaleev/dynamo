{\rtf1\mac\ansicpg10000\cocoartf824\cocoasubrtf330
{\fonttbl\f0\fswiss\fcharset77 Helvetica-Bold;\f1\fswiss\fcharset77 Helvetica;\f2\fswiss\fcharset77 Helvetica-Oblique;
}
{\colortbl;\red255\green255\blue255;}
\margl1440\margr1440\vieww14940\viewh11340\viewkind0
\deftab720
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural

\f0\b\fs28 \cf0 Object-Oriented Design in Computational Chemistry\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural

\f1\b0\fs24 \cf0 \
What I want to achieve:\
1) Teach scientists with C/FORTRAN backgrounds elements of OO design\
2) Teach C++\
3) Write production MD code\
4) Teach technology of programming: books, editing, compiling (make),\
debugging (gdb, valgrind), testing, profiling, documenting (Doxygen), etc.\
\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural

\f0\b \cf0 Outline of the workshop\
\pard\tx560\tx1120\tx1680\tx2240\tx2800\tx3360\tx3920\tx4480\tx5040\tx5600\tx6160\tx6720\pardeftab720\ql\qnatural\pardirnatural

\f1\b0 \cf0 \
Lecture 1: Intro (prerequisites). "Hello World" in C++ (see 
\f2\i AccC++
\f1\i0 ). Programming models supported by C++. How C++ helps writing scientific programs.\
\
Lecture 2: The program: MD, methods, basic algorithm (V=const). Initial design.\
\
Lecture 3: Critique. Tweaks: P=const, change potential, etc.\
\
==============\
\
Who owns Potential? It is clear that multiple terms in the potential may\
need to be computed separately.\
\
==============\
\
Lecture 4:\
1) Issues with old design\
	- new (projected) coordinates were not members of Particle\
	- propagate() integrated EOM *and* (indirectly) enforced boundary conditions via Box::contain\
	- propagate() would need particles, forces, and boundary conditions passed as parameters. This is ugly (ties up together\
	separate concepts -- what if I change the integration algorithm? It would take even more parameters, etc.)\
	- better to split out the function into concise, self-contained pieces\
		1) compute potential and forces\
		2) integrate EOM\
		3) enforce boundary conditions (+ measure P :-(\
		4) update coordinates\
		5) compute something (e.g. g(r))\
	- how to handle forces and "new" coordinates? Members of Particle (avoid raw data!).\
	- Some integrators (Verlet) require several past positions, momenta, or accelerations to be preserved. Update\
	is complicated, hence should be a separate step\
2) New Design\
	- no forces yet\
	- Integrator::step() takes particles and computes new positions and momenta\
	- Box::contain() only updates the new positions and momenta to satisfy boundary conditions + measures P\
	- Particle::make_step() puts rnew and pnew to p and r\
3) v0.3 : add Potential\
	- Create Potential_LJ class with evaluate() member\
\
==============\
\
Lecture 7:\
1) What can do now: constant V, single particle type, single-term potential (vdW)\
2) Problems: initial configuration's energy is too high\
	- need an Optimizer + Hessian\
	- or just make sure the particles are not too close, but that probably won't work for high enough densities\
	- heating is also not perfect\
3) Multiple potentials\
	- almost everything will work!\
4) Multiple particle types, e.g. atoms in molecules, etc. The only code that's affected is Particle and Potential\
	- Add particle type info (type field, label, etc.)\
	- Particle is becoming too "fat" now: tightens the coupling, affects performance\
	- "Proxy" design (Pimpl idiom)\
\
}